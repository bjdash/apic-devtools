{"version":3,"sources":["IndexedDb.js","Services.js","Dropdown.js","App.js","index.js"],"names":["dbPromise","openDB","upgrade","db","projectsStore","createObjectStore","keyPath","createIndex","unique","idbKeyval","insert","table","value","add","upsert","put","read","getAll","readSorted","field","order","getAllFromIndex","reverse","delete","id","deleteMulti","ids","Promise","all","map","findByKey","key","get","getByIds","extra","clear","getSuites","a","iDB","Dropdown","props","state","selected","initialSelected","isOpen","options","handleDocumentClick","bind","openMenu","selectMenu","wrapper","React","createRef","document","addEventListener","this","length","removeEventListener","event","ReactDOM","findDOMNode","current","contains","target","setState","option","onChange","optn","className","_id","onClick","name","console","log","ref","onRefresh","aria-expanded","buildMenu","nextProps","prevState","Component","App","requests","suites","selectedSuite","urlFilter","paused","include","filteredTypes","supportedtypes","error","onSuitSelected","loadSuites","toggleFilterType","clearAll","toggleInclude","addToSuite","window","chrome","devtools","network","onRequestFinished","addListener","request","getContent","content","encoding","_resourceType","url","resourceType","includes","toLowerCase","addRequest","response","text","Math","random","toString","substring","newRequestsList","Services","Date","toLocaleString","month","day","type","filter","t","reqId","req","filterString","filters","split","f","trim","Boolean","some","requestsToAdd","getFilteredRequests","tabs","query","apicTab","find","tab","app","getDetails","update","active","sendMessage","suite","filteredReq","htmlFor","onFilterChange","placeholder","checked","indexOf","index","removeReq","method","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7e57d586.chunk.js","sourcesContent":["import { openDB } from 'idb';\r\n\r\nconst dbPromise = openDB('apic', 11, {\r\n    upgrade(db) {\r\n        var projectsStore = db.createObjectStore('Projects', { keyPath: '_id' });\r\n        projectsStore.createIndex('_created', '_created', { unique: false });\r\n        projectsStore.createIndex('_id', '_id', { unique: true });\r\n    },\r\n});\r\n\r\nconst idbKeyval = {\r\n    async insert(table, value) {\r\n        return (await dbPromise).add(table, value);\r\n    },\r\n\r\n    async upsert(table, value) {\r\n        return (await dbPromise).put(table, value);\r\n    },\r\n\r\n    async read(table) {\r\n        return (await dbPromise).getAll(table);\r\n    },\r\n\r\n    async readSorted(table, field, order) {\r\n        if (order === 'asc') {\r\n            return (await dbPromise.getAllFromIndex(table, field));\r\n        } else {\r\n            return (await dbPromise.getAllFromIndex(table, field)).reverse();\r\n        }\r\n    },\r\n\r\n    async delete(table, id) {\r\n        return (await dbPromise).delete(table, id);\r\n    },\r\n\r\n    //TODO: check if the repeat can be avoided\r\n    async deleteMulti(table, ids) {\r\n        var db = await dbPromise;\r\n        return await Promise.all(\r\n            ids.map(id => {\r\n                return db.delete(table, id);\r\n            })\r\n        )\r\n    },\r\n\r\n    //TODO: read via specified key\r\n    async findByKey(table, key, value) {\r\n        return (await dbPromise).get(table, value);\r\n    },\r\n\r\n    //TODO: Check if extra is used anywhere\r\n    async getByIds(table, key, ids, extra) {\r\n        var db = await dbPromise;\r\n        return await Promise.all(\r\n            ids.map(id => {\r\n                return db.get(table, id);\r\n            })\r\n        )\r\n    },\r\n\r\n    async clear(table) {\r\n        return (await dbPromise).clear(table);\r\n    },\r\n};\r\n\r\nexport default idbKeyval;\r\n","import iDB from './IndexedDb';\r\n\r\nexport async function getSuites() {\r\n    return await iDB.read('TestSuits');\r\n}\r\n\r\nexport function getFiltersList(filterString) {\r\n    return filterString.split(',').map(f => f.trim()).filter(Boolean);\r\n}\r\n\r\nexport function getId() {\r\n    return Math.random().toString(36).substring(2, 15)\r\n}","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass Dropdown extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            selected: props.value,\r\n            initialSelected: props.value,\r\n            isOpen: false,\r\n            options: props.options\r\n        }\r\n        this.handleDocumentClick = this.handleDocumentClick.bind(this);\r\n        this.openMenu = this.openMenu.bind(this);\r\n        this.selectMenu = this.selectMenu.bind(this);\r\n        this.wrapper = React.createRef();\r\n    }\r\n\r\n    // componentWillReceiveProps(newProps) {\r\n    //     console.log('updating');\r\n    //     if (newProps.value) {\r\n    //         if (newProps.value._id !== this.state.selected._id) {\r\n    //             this.setState({ selected: newProps.value })\r\n    //         }\r\n    //     }\r\n    //     if (newProps.options) {\r\n    //         this.setState({ options: newProps.options });\r\n    //     }\r\n    // }\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        if (nextProps.value && nextProps.value !== prevState.initialSelected) {\r\n            return { selected: nextProps.value, initialSelected: nextProps.value };\r\n        }\r\n        if (nextProps.options) {\r\n            return { options: nextProps.options };\r\n        }\r\n        return null;\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('click', this.handleDocumentClick, false);\r\n        document.addEventListener('touchend', this.handleDocumentClick, false);\r\n        if (this.state.options.length > 0) {\r\n            this.selectMenu(this.state.options[0]);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener('click', this.handleDocumentClick, false)\r\n        document.removeEventListener('touchend', this.handleDocumentClick, false)\r\n    }\r\n\r\n    handleDocumentClick(event) {\r\n        // if (this.mounted) {\r\n        // if (!ReactDOM.findDOMNode(this).contains(event.target)) {\r\n        if (!ReactDOM.findDOMNode(this.wrapper.current).contains(event.target)) {\r\n            if (this.state.isOpen) {\r\n                this.setState({ isOpen: false })\r\n            }\r\n        }\r\n        // }\r\n    }\r\n    selectMenu(option) {\r\n        this.setState({ selected: option, isOpen: false })\r\n        this.props.onChange(option);\r\n    }\r\n\r\n    openMenu() {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        })\r\n    }\r\n\r\n    buildMenu() {\r\n        return this.state.options.map(optn => <button className=\"dropdown-item\" key={optn._id} onClick={() => this.selectMenu(optn)}>\r\n            {optn.name}\r\n        </button>)\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state.selected)\r\n        return (<div className={\"dropdown-cont \" + this.props.className} ref={this.wrapper}>\r\n            <div className=\"dropdown-selected\">\r\n                <button className=\"dropdown-anchor\" onClick={this.openMenu}>{this.state.selected ? this.state.selected.name : 'Nothing found'}</button>\r\n                <span className=\"dropdown-arrow\"></span>\r\n                <button className=\"dropdown-refresh\" onClick={this.props.onRefresh}><i className=\"icon-loop\"></i></button>\r\n            </div>\r\n            {\r\n                this.state.isOpen && <div className=\"dropdown-menus\" aria-expanded='true'>\r\n                    {this.state.options.length > 0 && this.buildMenu()}\r\n                    {this.state.options.length === 0 && <div className=\"dropdown-item\">No test suites found. Please create one.</div>}\r\n                </div>\r\n            }\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default Dropdown;","//@ts-check\nimport React from 'react';\nimport * as Services from './Services';\nimport Dropdown from './Dropdown';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            requests: [],\n            suites: [],\n            selectedSuite: null,\n            urlFilter: '',\n            paused: false,\n            include: true,\n            filteredTypes: ['xhr', 'document', 'other', 'fetch'],\n            supportedtypes: ['xhr', 'document', 'stylesheet', 'script', 'fetch', 'other'],\n            error: ''\n        }\n        this.onSuitSelected = this.onSuitSelected.bind(this);\n        this.loadSuites = this.loadSuites.bind(this);\n        this.toggleFilterType = this.toggleFilterType.bind(this);\n        this.clearAll = this.clearAll.bind(this);\n        this.toggleInclude = this.toggleInclude.bind(this);\n        this.addToSuite = this.addToSuite.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadSuites();\n        if (window.chrome && window.chrome.devtools) {\n            window.chrome.devtools.network.onRequestFinished.addListener(request => {\n                request.getContent((content, encoding) => {\n                    console.log(request._resourceType, request.request.url);\n                    const resourceType = request._resourceType || 'other';\n                    const { paused, filteredTypes } = this.state\n                    if (!paused && request.request && request.request.url && filteredTypes.includes(resourceType.toLowerCase())) {\n                        this.addRequest(request, content, encoding)\n                    }\n                });\n            });\n        }\n    }\n\n    addRequest(request, content, encoding) {\n        if (request.response && request.response.content) {\n            request.response.content.text = content;\n            request.response.content.encoding = encoding;\n        }\n        request['_id'] = Services.getId();\n        delete request['_initiator'];\n        const newRequestsList = [...this.state.requests, request];\n        this.setState({\n            requests: newRequestsList\n        });\n    }\n\n    async loadSuites() {\n        let suites = await Services.getSuites();\n        console.log(suites)\n        if (suites && suites.length > 0) {\n            this.setState({ suites: [...suites] });\n        } else {\n            this.setState({ suites: [] });;\n        }\n    }\n\n    onSuitSelected(selectedSuite) {\n        this.setState({ selectedSuite })\n    }\n\n    getNewProj() {\n        return {\n            _id: 'new',\n            name: 'New Proj ' + new Date().toLocaleString('default', { month: 'short', day: '2-digit' })\n        }\n    }\n    onFilterChange(event) {\n        this.setState({ urlFilter: event.target.value })\n    }\n\n    toggleFilterType(type) {\n        let { filteredTypes } = this.state;\n        if (filteredTypes.includes(type)) {//remove\n            this.setState({ filteredTypes: filteredTypes.filter(t => t !== type) })\n        } else {//add\n            this.setState({ filteredTypes: [...filteredTypes, type] })\n        }\n    }\n    toggleInclude() {\n        this.setState({ include: !this.state.include });\n    }\n\n    removeReq(reqId) {\n        const requests = this.state.requests.filter(req => req._id !== reqId);\n        this.setState({ requests })\n    }\n\n    clearAll() {\n        this.setState({ requests: [] })\n    }\n\n    getFilteredRequests(requests, filterString, include) {\n        const filters = Services.getFiltersList(filterString);\n        return requests.filter(request => { return (!filterString || filters.some(filter => request.request.url.includes(filter)) === include) });\n    }\n\n    addToSuite() {\n        let { requests, urlFilter, include, selectedSuite } = this.state;\n        if (!selectedSuite) {\n            if (this.state.suites.length > 0) {\n                selectedSuite = this.state.suites[0];\n            } else {\n                this.setState({ error: 'No Suites found' });\n            }\n        }\n        console.log('selected', this.state.selectedSuite);\n\n        const requestsToAdd = this.getFilteredRequests(requests, urlFilter, include);\n\n        window.chrome.tabs.query({}, (tabs) => {\n            const apicTab = tabs.find(tab => tab.url && tab.url.includes(window.chrome.app.getDetails().id))\n            console.log(window.chrome.app.getDetails().id, apicTab)\n            if (apicTab) {\n                console.log('sending...')\n                window.chrome.tabs.update(apicTab.id, {\n                    active: true\n                });\n                window.chrome.tabs.sendMessage(apicTab.id, { requests: requestsToAdd, suite: selectedSuite._id }, (response) => {\n                    console.log('acknowledge', response);\n                });\n            } else {\n                this.setState({ error: 'APIC extension is not opened. Please open APIC first and then add requests.' })\n            }\n        });\n    }\n\n    render() {\n        const { paused, supportedtypes, filteredTypes, error, urlFilter, requests, include } = this.state;\n        const filteredReq = this.getFilteredRequests(requests, urlFilter, include);\n        return (\n            <div className=\"dark\">\n                <div className=\"header\">\n                    <div className=\"title\">APIC Session Recorder</div>\n                    <button onClick={() => this.setState({ paused: !paused })} className=\"btn red\">\n                        {paused ?\n                            <span><i className=\"icon-fiber_manual_record\"></i><span>Record</span></span> :\n                            <span><i className=\"icon-pause\"></i><span>Pause</span></span>\n                        }\n                    </button>\n                    <button className=\"btn\" onClick={this.clearAll}><i className=\"icon-delete\"></i><span>Clear All</span></button>\n                    <div className=\"input-grp proj-dd\">\n                        <label>Test Suites</label>\n                        {<Dropdown onRefresh={this.loadSuites} className=\"\" onChange={this.onSuitSelected} options={this.state.suites} value={this.state.suites.length > 0 && this.state.suites[0]} />}\n                    </div>\n                    <button className=\"btn blue\" onClick={() => this.addToSuite()}><i className=\"icon-save\"></i><span>Add to Suite</span></button>\n                </div>\n                <div className=\"app\">\n                    <div className=\"top-menu\">\n                        <div className=\"input-grp filter-url\">\n                            <label htmlFor=\"url\">URL Filter</label>\n                            <input className=\"input\" id=\"url\" onChange={(event) => this.onFilterChange(event)} type=\"text\" name=\"url-filter\" placeholder=\"Use comma separated values for multiple filter\" />\n                        </div>\n\n                        <div className=\"switch-cont\">\n                            <div>Exclude </div>\n                            <label className=\"switch\">\n                                <input type=\"checkbox\" checked={this.state.include} onChange={this.toggleInclude} />\n                                <span className=\"slider round\"></span>\n                            </label>\n                            <div> Include</div>\n                        </div>\n\n                        <div>\n                            {supportedtypes.map(type => <button key={type} onClick={() => this.toggleFilterType(type)} className={\"type btn\" + (filteredTypes.indexOf(type) >= 0 ? ' active' : '')}>{type}</button>)}\n                        </div>\n                    </div>\n\n                    <div className=\"req-cont\">\n                        {error && <div className=\"error red\">\n                            <div>{error}</div>\n                            <button className=\"btn\" onClick={() => this.setState({ error: '' })}><i className=\"icon-clear\"></i></button>\n                        </div>}\n                        {filteredReq.map((req, index) => (\n                            <div className=\"req\" key={index}>\n                                <button onClick={() => this.removeReq(req._id)} className=\"\"><i className=\"icon-remove_circle red\"></i></button>\n                                <div className={'method ' + req.request.method}>{req.request.method}</div>\n                                <div>{req.request.url}</div>\n                            </div>\n                        ))}\n\n                        {\n                            this.state.requests.length === 0 && <div className=\"no-req\">\n                                {this.state.paused ? 'Click Record to start capturing your requests' : 'Interact with the page to start capturing requests'}\n                            </div>\n                        }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}